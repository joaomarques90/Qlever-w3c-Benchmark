query not answered;reason: {'exception': 'ParseException, cause: Unexpected input: NOT EXISTS { ?s2 :member ?x . } )\n    }\n    # Remove those that are the pairs with the same elements.\n    # See set-equals-1\n    MINUS {\n        ?s2 rdf:type :Set .\n        ?s1 rdf:type :Set .\n        MINUS \n        {\n            ?s1 rdf:type :Set .\n            ?s2 rdf:type :Set .\n            ?s1 :member ?x .\n            FILTER NOT EXISTS { ?s2 :member ?x . }\n        }\n        MINUS \n        {\n            ?s1 rdf:type :Set .\n            ?s2 rdf:type :Set .\n            ?s2 :member ?x .\n            FILTER NOT EXISTS { ?s1 :member ?x . }\n        }\n    }\n}\n', 'query': 'PREFIX :    <http://example/>\nPREFIX  rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT (?s1 AS ?subset) (?s2 AS ?superset)\nWHERE\n{\n    # All pairs of sets except (S,S)\n    ?s2 rdf:type :Set .\n    ?s1 rdf:type :Set .\n    MINUS {\n        # See subset-01 ...\n        ?s1 rdf:type :Set .\n        ?s2 rdf:type :Set .\n        ?s1 :member ?x .\n        FILTER ( NOT EXISTS { ?s2 :member ?x . } )\n    }\n    # Remove those that are the pairs with the same elements.\n    # See set-equals-1\n    MINUS {\n        ?s2 rdf:type :Set .\n        ?s1 rdf:type :Set .\n        MINUS \n        {\n            ?s1 rdf:type :Set .\n            ?s2 rdf:type :Set .\n            ?s1 :member ?x .\n            FILTER NOT EXISTS { ?s2 :member ?x . }\n        }\n        MINUS \n        {\n            ?s1 rdf:type :Set .\n            ?s2 rdf:type :Set .\n            ?s2 :member ?x .\n            FILTER NOT EXISTS { ?s1 :member ?x . }\n        }\n    }\n}\n', 'resultsize': 0, 'status': 'ERROR', 'time': {'computeResult': 11, 'total': 11}}; details: ParseException, cause: Unexpected input: NOT EXISTS { ?s2 :member ?x . } )
    }
    # Remove those that are the pairs with the same elements.
    # See set-equals-1
    MINUS {
        ?s2 rdf:type :Set .
        ?s1 rdf:type :Set .
        MINUS 
        {
            ?s1 rdf:type :Set .
            ?s2 rdf:type :Set .
            ?s1 :member ?x .
            FILTER NOT EXISTS { ?s2 :member ?x . }
        }
        MINUS 
        {
            ?s1 rdf:type :Set .
            ?s2 rdf:type :Set .
            ?s2 :member ?x .
            FILTER NOT EXISTS { ?s1 :member ?x . }
        }
    }
}
